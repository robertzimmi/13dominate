<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Admin Reports - Exemplo</title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

  <!-- Grid.js CSS -->
  <link href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css" rel="stylesheet" />

  <style>
    html, body {
      overflow-x: hidden;
      max-width: 100vw;
      margin: 0;
      font-family: 'Roboto', sans-serif;
      background-color: #121212;
      color: white;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
    }

    main {
      flex: 1;
      padding: 20px;
      width: 100%;
      box-sizing: border-box;
    }

    .container {
      width: 100%;
      max-width: 100vw;
      padding: 0 12px;
      margin: 0 auto;
      box-sizing: border-box;
    }

    /* ===========================
       Grid.js responsivo para mobile
    ============================ */
    @media (max-width: 768px) {
      /* Esconder colunas menos a primeira */
      .gridjs-table td:not(:first-child),
      .gridjs-table th:not(:first-child) {
        display: none;
      }

      /* Linha clicável */
      .expand-row {
        cursor: pointer;
        background-color: #e3f2fd;
        padding: 8px;
      }

      /* Conteúdo oculto da linha */
      .gridjs-details {
        display: none;
        font-size: 0.9rem;
        margin-top: 5px;
        background-color: #f1f1f1;
        color: black;
        padding: 8px;
        border-radius: 4px;
      }

      /* Mostrar detalhes quando ativo */
      .gridjs-details.visible {
        display: block;
      }
    }

    @media (min-width: 769px) {
      /* Mostrar todas as colunas no desktop */
      .gridjs-table td,
      .gridjs-table th {
        display: table-cell !important;
      }

      /* Esconder detalhes sempre no desktop */
      .gridjs-details {
        display: none !important;
      }

      /* Remover estilos clicáveis da linha */
      .expand-row {
        cursor: default;
        background-color: transparent;
        padding: 0;
      }
    }
  </style>
</head>
<body>

  <main class="container">
    <h4 class="text-center mb-4">Admin Reports - Exemplo</h4>

    <div id="table-container"></div>
  </main>

  <!-- Bootstrap Bundle JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <!-- Grid.js -->
  <script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>

  <script>
    // Função para abrir/fechar detalhes
    function toggleDetails(el) {
      const details = el.querySelector('.gridjs-details');
      if (details) {
        details.classList.toggle('visible');
      }
    }

    // Exemplo de dados e colunas
    const columns = ['Nome', 'Idade', 'Email', 'Cidade'];
    const data = [
      { Nome: 'Maria', Idade: 28, Email: 'maria@email.com', Cidade: 'São Paulo' },
      { Nome: 'João', Idade: 34, Email: 'joao@email.com', Cidade: 'Rio de Janeiro' },
      { Nome: 'Ana', Idade: 22, Email: 'ana@email.com', Cidade: 'Belo Horizonte' }
    ];

    // Monta as linhas para grid.js com a row expansível
    function buildRows(dataset) {
      return dataset.map(item => {
        // Monta o HTML do detalhe com todos os campos e valores
        const detailsHtml = Object.entries(item).map(([key, val]) =>
          `<strong>${key}:</strong> ${val}<br>`
        ).join("");

        // A primeira coluna terá o toggle, as outras serão normais
        return [
          gridjs.html(`
            <div class="expand-row" onclick="toggleDetails(this)">
              <div>${item['Nome'] || '(sem nome)'}</div>
              <div class="gridjs-details">${detailsHtml}</div>
            </div>
          `),
          item['Idade'] || '',
          item['Email'] || '',
          item['Cidade'] || ''
        ];
      });
    }

    // Inicializa a grid
    new gridjs.Grid({
      columns: columns,
      data: buildRows(data),
      search: true,
      pagination: { enabled: true, limit: 5 },
      sort: true,
      className: {
        table: 'table table-striped table-hover text-black bg-white'
      }
    }).render(document.getElementById("table-container"));
  </script>
</body>
</html>
